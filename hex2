<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>3-Player Hex Tic Tac Toe</title>
<style>
  body { display: flex; justify-content: center; margin-top: 20px; font-family: sans-serif; }
  svg { background: white; }
  polygon { fill: white; stroke: black; stroke-width: 2; cursor: pointer; }
  text { font-size: 22px; font-weight: bold; text-anchor: middle; dominant-baseline: central; pointer-events: none; }
  #status { margin-left: 20px; font-size: 18px; }
</style>
</head>
<body>
  <svg id="board"></svg>
  <div id="status">Player X’s turn</div>

<script>
const n = 4;          // side length of hex board
const size = 35;      // hex radius
const svg = document.getElementById("board");
const statusEl = document.getElementById("status");

const players = ["X","O","▲"];
let turn = 0;
let cells = {};   // key: "q,r", value: {player, poly, text}

// axial -> pixel
function axialToPixel(q, r) {
  const x = size * (3/2) * q;
  const y = size * (Math.sqrt(3) * (r + q/2));
  return [x,y];
}
// polygon points
function hexPoints(cx, cy) {
  let pts=[];
  for (let k=0;k<6;k++) {
    const ang = Math.PI/180*(60*k);
    pts.push(`${cx+size*Math.cos(ang)},${cy+size*Math.sin(ang)}`);
  }
  return pts.join(" ");
}

// generate board axial coords
let coords=[];
const radius=n-1;
for (let q=-radius;q<=radius;q++) {
  const r1=Math.max(-radius,-q-radius);
  const r2=Math.min(radius,-q+radius);
  for (let r=r1;r<=r2;r++) coords.push([q,r]);
}
let centers=coords.map(([q,r])=>axialToPixel(q,r));
let minX=Math.min(...centers.map(c=>c[0]))-size;
let maxX=Math.max(...centers.map(c=>c[0]))+size;
let minY=Math.min(...centers.map(c=>c[1]))-size;
let maxY=Math.max(...centers.map(c=>c[1]))+size;
svg.setAttribute("width",maxX-minX);
svg.setAttribute("height",maxY-minY);
svg.setAttribute("viewBox",`${minX} ${minY} ${maxX-minX} ${maxY-minY}`);

// draw hexes
coords.forEach(([q,r])=>{
  const [cx,cy]=axialToPixel(q,r);
  const poly=document.createElementNS("http://www.w3.org/2000/svg","polygon");
  poly.setAttribute("points",hexPoints(cx,cy));
  poly.addEventListener("click",()=>play(q,r));
  svg.appendChild(poly);
  const txt=document.createElementNS("http://www.w3.org/2000/svg","text");
  txt.setAttribute("x",cx); txt.setAttribute("y",cy);
  svg.appendChild(txt);
  cells[`${q},${r}`]={player:null,poly,text:txt};
});

// handle move
function play(q,r) {
  const cell=cells[`${q},${r}`];
  if(!cell || cell.player) return;
  const p=players[turn%3];
  cell.player=p;
  cell.text.textContent=p;
  if(checkWin(q,r,p)) {
    statusEl.textContent=`Player ${p} wins!`;
    Object.values(cells).forEach(c=>c.poly.style.pointerEvents="none");
  } else {
    turn++;
    statusEl.textContent=`Player ${players[turn%3]}’s turn`;
  }
}

// directions in axial coords (3 unique)
const dirs=[[1,0],[0,1],[-1,1]];

// check 4 in a row
function checkWin(q,r,p) {
  for (let [dq,dr] of dirs) {
    let count=1;
    count+=countDir(q,r,dq,dr,p);
    count+=countDir(q,r,-dq,-dr,p);
    if(count>=4) return true;
  }
  return false;
}
function countDir(q,r,dq,dr,p) {
  let c=0;
  let nq=q+dq,nr=r+dr;
  while(cells[`${nq},${nr}`] && cells[`${nq},${nr}`].player===p) {
    c++; nq+=dq; nr+=dr;
  }
  return c;
}
</script>
</body>
</html>